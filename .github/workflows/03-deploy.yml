name: 3. Deploy Docker Images in GCP
on:
  workflow_run:
    workflows: ["2. Build and Push Docker Images to Docker Hub"]
    types:
      - completed
    branches:
      - main

env:
  GCP_HOST: ${{ secrets.GCP_HOST }}
  GCP_USERNAME: ${{ secrets.GCP_USERNAME }}
  DEPLOYMENT_PATH: '~/learnlab'
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
  JWT_ALGORITHM: ${{ secrets.JWT_ALGORITHM }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
  GCP_SSH_PRIVATE_KEY: ${{ secrets.GCP_SSH_PRIVATE_KEY }}
  DEBUG: ${{ secrets.DEBUG }}
  ENVIRONMENT: 'production'
  PYTHON_VERSION: '3.12'
  POETRY_VERSION: '1.7.0'
  ACCESS_TOKEN_EXPIRE_MINUTES: '30'
  REFRESH_TOKEN_EXPIRE_DAYS: '7'
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY}}
  PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY}}
  PINECONE_INDEX_NAME: ${{ secrets.PINECONE_INDEX_NAME}} 
  NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
  GOOGLE_API_CREDENTIALS: ${{ secrets.GOOGLE_API_CREDENTIALS }}
  UPSTASH_VECTOR_REST_URL: ${{ secrets.UPSTASH_VECTOR_REST_URL }}
  UPSTASH_VECTOR_REST_TOKEN: ${{ secrets.UPSTASH_VECTOR_REST_TOKEN }}
  GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

  ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY }}
  ELEVENLABS_VOICE_ID_1: ${{ secrets.ELEVENLABS_VOICE_ID_1 }}
  ELEVENLABS_VOICE_ID_2: ${{ secrets.ELEVENLABS_VOICE_ID_2 }}
  
jobs:
  deploy:
    name: Deploy to GCP
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Verify trigger
        run: |
          echo "Triggered by: ${{ github.event.workflow_run.conclusion }}"
          echo "Workflow run ID: ${{ github.run_id }}"
          echo "Workflow run number: ${{ github.run_number }}"
          echo "Workflow run URL: ${{ github.event.workflow_run.event.run_url }}"
          echo "Workflow run conclusion: ${{ github.event.workflow_run.conclusion }}"
          echo "Workflow run status: ${{ github.event.workflow_run.status}}"
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Step 2: Configure SSH
      - name: Configure SSH
        run: |
          echo "Setting up SSH..."
          mkdir -p ~/.ssh
          echo "${{ secrets.GCP_SSH_PRIVATE_KEY }}" > ~/.ssh/gcp_key
          chmod 600 ~/.ssh/gcp_key
          echo "SSH configuration complete."

      # Step 3: Verify required secrets
      - name: Verify required secrets
        run: |
          echo "Verifying secrets..."
          required_secrets=(
            ACCESS_TOKEN_EXPIRE_MINUTES
            AWS_ACCESS_KEY_ID
            AWS_BUCKET_NAME
            AWS_REGION
            AWS_SECRET_ACCESS_KEY
            DATABASE_URL
            DEBUG
            DOCKER_TOKEN
            DOCKER_USERNAME
            ENVIRONMENT
            GCP_SSH_PRIVATE_KEY
            JWT_ALGORITHM
            JWT_SECRET_KEY
            REFRESH_TOKEN_EXPIRE_DAYS
            OPENAI_API_KEY
            PINECONE_API_KEY
            PINECONE_INDEX_NAME
            NEXT_PUBLIC_API_URL
            GOOGLE_API_CREDENTIALS
            UPSTASH_VECTOR_REST_URL
            UPSTASH_VECTOR_REST_TOKEN
            GEMINI_API_KEY
            ELEVENLABS_API_KEY
            ELEVENLABS_VOICE_ID_1
            ELEVENLABS_VOICE_ID_2
          )
          for secret in "${required_secrets[@]}"; do
            if [ -z "${!secret}" ]; then
              echo "Error: $secret is not set!"
              exit 1
            else
              echo "Verified secret: $secret"
            fi
          done
          echo "All required secrets verified."

      # Step 4: Create .env file
      - name: Create .env file
        run: |
          echo "Creating .env file..."
          cat > .env << EOL
          ACCESS_TOKEN_EXPIRE_MINUTES="${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}"
          AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          AWS_BUCKET_NAME="${{ secrets.AWS_BUCKET_NAME }}"
          AWS_REGION="${{ secrets.AWS_REGION }}"
          AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          DATABASE_URL="${{ secrets.DATABASE_URL }}"
          DEBUG="${{ secrets.DEBUG }}"
          DOCKER_TOKEN="${{ secrets.DOCKER_TOKEN }}"
          NEXT_PUBLIC_API_URL="${{ secrets.NEXT_PUBLIC_API_URL }}"
          DOCKER_USERNAME="${{ secrets.DOCKER_USERNAME }}"
          ENVIRONMENT="${{ secrets.ENVIRONMENT }}"
          JWT_ALGORITHM="${{ secrets.JWT_ALGORITHM }}"
          JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}"
          REFRESH_TOKEN_EXPIRE_DAYS="${{ secrets.REFRESH_TOKEN_EXPIRE_DAYS }}"
          OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}"
          PINECONE_API_KEY="${{ secrets.PINECONE_API_KEY }}"
          PINECONE_INDEX_NAME="${{ secrets.PINECONE_INDEX_NAME }}"
          GOOGLE_API_CREDENTIALS=${{ secrets.GOOGLE_API_CREDENTIALS }}
          UPSTASH_VECTOR_REST_URL="${{ secrets.UPSTASH_VECTOR_REST_URL }}"
          UPSTASH_VECTOR_REST_TOKEN="${{ secrets.UPSTASH_VECTOR_REST_TOKEN }}"
          GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY }}"
          ELEVENLABS_API_KEY="${{ secrets.ELEVENLABS_API_KEY }}"
          ELEVENLABS_VOICE_ID_1="${{ secrets.ELEVENLABS_VOICE_ID_1 }}"
          ELEVENLABS_VOICE_ID_2="${{ secrets.ELEVENLABS_VOICE_ID_2 }}"
          EOL

          if [ ! -f .env ]; then
            echo "Error: .env file was not created successfully."
            exit 1
          else
            echo ".env file created successfully."
          fi

      # Step 5: Verify and Install Docker and Docker-compose in GCP
      - name: Docker Installation
        env:
          SSH_COMMAND: "ssh -i ~/.ssh/gcp_key -o StrictHostKeyChecking=no ${{ env.GCP_USERNAME }}@${{ env.GCP_HOST }}"
          SCP_COMMAND: "scp -i ~/.ssh/gcp_key -o StrictHostKeyChecking=no"
        run: |
          # Check and install Docker and Docker Compose
          echo "Checking and installing Docker and Docker Compose on GCP..."
          ${{ env.SSH_COMMAND }} '
            if ! command -v docker &> /dev/null || ! docker --version | grep -q "20."; then
              echo "Docker not found or outdated. Installing Docker..."
              sudo apt update &&
              sudo apt install -y apt-transport-https ca-certificates curl gnupg2 software-properties-common &&
              curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor --batch --yes -o /usr/share/keyrings/docker-archive-keyring.gpg &&
              echo "deb [arch=arm64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null &&
              sudo apt update &&
              sudo apt install -y docker-ce docker-ce-cli containerd.io &&
              sudo systemctl enable docker &&
              sudo systemctl start docker
              sudo usermod -aG docker $USER
            else
              echo "Docker is already installed."
            fi
            
            if ! command -v docker-compose &> /dev/null || ! docker-compose --version | grep -q "v2.21.0"; then
              echo "Docker Compose not found or outdated. Installing Docker Compose..."
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-linux-aarch64" -o /usr/local/bin/docker-compose &&
              sudo chmod +x /usr/local/bin/docker-compose &&
              docker-compose --version
            else
              echo "Docker Compose is already installed."
            fi
          ' || {
            echo "Error: Docker or Docker Compose installation failed."
            exit 1
          }
          echo "Docker and Docker Compose are ready."

      # Step 6: Clean up old Docker images
      - name: Clean up old Docker images
        env:
          SSH_COMMAND: "ssh -i ~/.ssh/gcp_key -o StrictHostKeyChecking=no ${{ env.GCP_USERNAME }}@${{ env.GCP_HOST }}"
        run: |
          echo "Cleaning up old Docker images on GCP..."
          ${{ env.SSH_COMMAND }} '
            docker image prune -a -f || {
              echo "Error: Failed to clean up old Docker images."
              exit 1
            }
          '
          echo "Old Docker images cleaned up successfully."

      # Step 7: Deploy to GCP
      - name: Deploy to GCP
        env:
          SSH_COMMAND: "ssh -i ~/.ssh/gcp_key -o StrictHostKeyChecking=no ${{ env.GCP_USERNAME }}@${{ env.GCP_HOST }}"
          SCP_COMMAND: "scp -i ~/.ssh/gcp_key -o StrictHostKeyChecking=no"
        run: |
          # Create deployment directory
          echo "Starting deployment process..."

          # Create deployment directory
          echo "Creating deployment directory on GCP..."
          ${{ env.SSH_COMMAND }} "mkdir -p ${{ env.DEPLOYMENT_PATH }}" || {
            echo "Error: Failed to create deployment directory."
            exit 1
          }
          echo "Deployment directory created successfully."          

          # Copy files to GCP
          echo "Copying docker-compose.prod.yml to GCP..."
          ${{ env.SCP_COMMAND }} docker-compose.prod.yml ${{ env.GCP_USERNAME }}@${{ env.GCP_HOST }}:${{ env.DEPLOYMENT_PATH }}/ || {
            echo "Error: Failed to copy docker-compose.prod.yml."
            exit 1
          }
          echo "docker-compose.prod.yml copied successfully to GCP."

          echo "Copying .env file to GCP..."
          ${{ env.SCP_COMMAND }} .env ${{ env.GCP_USERNAME }}@${{ env.GCP_HOST }}:${{ env.DEPLOYMENT_PATH }}/ || {
            echo "Error: Failed to copy .env file."
            exit 1
          }
          echo ".env file copied successfully to GCP."

          # Deploy using Docker Compose
          echo "Deploying services on GCP..."
          ${{ env.SSH_COMMAND }} "cd ${{ env.DEPLOYMENT_PATH }} && \
            docker-compose -f docker-compose.prod.yml pull && \
            docker-compose -f docker-compose.prod.yml up -d" || {
            echo "Error: Deployment failed."
            exit 1
          }
          echo "Deployment completed successfully."
      
      # Step 8: Verify Deployment    
      - name: Verify Deployment
        env:
          SSH_COMMAND: "ssh -i ~/.ssh/gcp_key -o StrictHostKeyChecking=no ${{ env.GCP_USERNAME }}@${{ env.GCP_HOST }}"
        run: |
          echo "Verifying deployment..."
          sleep 60  # Wait for services to start
          ${{ env.SSH_COMMAND }} "cd ${{ env.DEPLOYMENT_PATH }} && \
            docker-compose -f docker-compose.prod.yml ps && \
            curl -f http://localhost:8000/health || exit 1"
          echo "Deployment verified successfully."
